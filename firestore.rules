
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidUser() {
      return isAuthenticated() && 
             request.auth.uid != null && 
             request.auth.uid.size() > 0;
    }
    
    function isValidMessage() {
      return request.resource.data.keys().hasAll(['senderId', 'text', 'timestamp']) &&
             request.resource.data.senderId == request.auth.uid &&
             request.resource.data.text is string &&
             request.resource.data.text.size() <= 1000 &&
             request.resource.data.text.size() > 0;
    }
    
    // Users - can only read/write own profile
    match /users/{userId} {
      allow read, write: if isOwner(userId);
      allow create: if isAuthenticated() && 
                       request.auth.uid == userId &&
                       request.resource.data.keys().hasAll(['name', 'email', 'createdAt']);
    }
    
    // Chats - only participants can access
    match /chats/{chatId} {
      allow read: if isAuthenticated() && 
                     request.auth.uid in resource.data.participants;
      allow write: if isAuthenticated() && 
                      request.auth.uid in resource.data.participants &&
                      resource.data.participants.size() == 2;
                      
      // Messages within chats
      match /messages/{messageId} {
        allow read: if isAuthenticated() && 
                       request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        allow create: if isAuthenticated() && 
                         request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants &&
                         isValidMessage();
        allow update, delete: if false; // Messages cannot be edited or deleted
      }
    }
    
    // Connection requests
    match /connectionRequests/{requestId} {
      allow read: if isAuthenticated() && 
                     (request.auth.uid == resource.data.senderId || 
                      request.auth.uid == resource.data.receiverId);
      allow create: if isAuthenticated() && 
                       request.auth.uid == request.resource.data.senderId &&
                       request.resource.data.keys().hasAll(['senderId', 'receiverId', 'status', 'createdAt']) &&
                       request.resource.data.status == 'pending';
      allow update: if isAuthenticated() && 
                       request.auth.uid == resource.data.receiverId &&
                       request.resource.data.status in ['accepted', 'rejected'];
      allow delete: if false; // Connection requests cannot be deleted
    }
    
    // Public read-only data
    match /tournaments/{document} {
      allow read: if true;
      allow write: if false; // Only admin can write (server-side)
    }
    
    match /venues/{document} {
      allow read: if true;
      allow write: if false; // Only admin can write (server-side)
    }
    
    // Block all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
